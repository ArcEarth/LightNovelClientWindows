<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Q42.WinRT</name>
    </assembly>
    <members>
        <member name="T:Q42.WinRT.Controls.ImageExtensions">
            <summary>
            Attached properties for Images
            </summary>
        </member>
        <member name="F:Q42.WinRT.Controls.ImageExtensions.CacheUriProperty">
            <summary>
            Using a DependencyProperty as the backing store for WebUri.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.ImageExtensions.GetCacheUri(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the CacheUri property. This dependency property 
            WebUri that has to be cached
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.ImageExtensions.SetCacheUri(Windows.UI.Xaml.DependencyObject,System.Uri)">
            <summary>
            Sets the CacheUri property. This dependency property 
            WebUri that has to be cached
            </summary>
        </member>
        <member name="T:Q42.WinRT.Controls.UserControlFlyout">
            <summary>
            Flyout that can host a UserControl
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.UserControlFlyout.ShowFlyout(Windows.UI.Xaml.Controls.UserControl)">
            <summary>
            Show the Flyout with the UserControl as content
            </summary>
            <param name="control"></param>
        </member>
        <member name="T:Q42.WinRT.Controls.WebViewExtensions">
            <summary>
            Attached properties for WebView
            </summary>
        </member>
        <member name="F:Q42.WinRT.Controls.WebViewExtensions.SourceHtmlProperty">
            <summary>
            Using a DependencyProperty to use a binding to populate the webview with a HTML String instead of calling NavigateToString
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WebViewExtensions.GetSourceHtml(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the SourceHtmlProperty property. This dependency property 
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WebViewExtensions.SetSourceHtml(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the SourceHtmlProperty property. This dependency property 
            </summary>
        </member>
        <member name="T:Q42.WinRT.Controls.WrapPanel">
            <summary>
            WrapPanel implementation ported from Silverlight
            http://www.codeproject.com/Articles/24141/WrapPanel-for-Silverlight-2-0
            </summary>
        </member>
        <member name="P:Q42.WinRT.Controls.WrapPanel.Orientation">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="F:Q42.WinRT.Controls.WrapPanel.OrientationProperty">
            <summary>
            OrientationProperty
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WrapPanel.#ctor">
            <summary>
            Simple WrapPanel implementation ported from Silverlight
            </summary>
        </member>
        <member name="M:Q42.WinRT.Controls.WrapPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            MeasureOverride
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Controls.WrapPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            ArrangeOverride
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.ByteToStringConverter">
            <summary>
            Converts Bytes to Strings
            Copied from Silverlight Multi File Uploader project:
            http://slfileupload.codeplex.com
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.ByteToStringConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
             Converts Bytes to Strings
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.ByteToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            NotImplementedException
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.InverseVisibilityConverter">
            <summary>
            Converts anything to inverse visibility
            I know the VisibilityConvert supports the input parameter !. But it's easier to have two converters
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.InverseVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts anything to inverse visibility
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.InverseVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            NotImplementedException
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.ParallaxConverter">
            <summary>
            Source: http://w8isms.blogspot.nl/2012/06/metro-parallax-background-in-xaml.html
            Used to create background parallex like on the Win8 start screen
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.ParallaxConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Parallax converter helper
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.ParallaxConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            NotImplementedException
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.StringFormatConverter">
            <summary>
            Does a simple String format
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            String.Format Converter
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Returns the value
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.TextToLowerConverter">
            <summary>
            Converts text to lowercase
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.TextToLowerConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Returns value to lowercase
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.TextToLowerConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Returns input value
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Converters.VisibilityConverter">
            <summary>
            Converts anything to inverse visibility
            </summary>
        </member>
        <member name="M:Q42.WinRT.Converters.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts anything to inverse visibility
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Converters.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            NotImplementedException
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Data.CacheObject">
            <summary>
            Used as a wrapper around the stored file to keep metadata
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Q42.WinRT.Data.CacheObject.ExpireDateTime">
            <summary>
            Expire date of cached file
            </summary>
        </member>
        <member name="P:Q42.WinRT.Data.CacheObject.IsValid">
            <summary>
            Is the cache file valid?
            </summary>
        </member>
        <member name="T:Q42.WinRT.Data.CacheObject`1">
            <summary>
            Used as a wrapper around the stored file to keep metadata
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Q42.WinRT.Data.CacheObject`1.File">
            <summary>
            Actual file being stored
            </summary>
        </member>
        <member name="T:Q42.WinRT.Data.DataCache">
            <summary>
            Stores objects as json or xml in the localstorage
            </summary>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.DateTime},System.Boolean,Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Get object based on key, or generate the value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="generate"></param>
            <param name="expireDate"></param>
            <param name="forceRefresh"></param>
            <param name="serializerType">JSON or XML serializer</param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.GetFromCache``1(System.String,Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Get value from cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="serializerType">JSON or XML serializer</param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.Set``1(System.String,``0,System.Nullable{System.DateTime},Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Set value in cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireDate"></param>
            <param name="serializerType">JSON or XML serializer</param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.Delete(System.String,Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Delete key from cache
            </summary>
            <param name="key"></param>
            <param name="serializerType">JSON or XML serializer</param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.ClearAll">
            <summary>
            Clear the complete cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.DataCache.ClearInvalid(Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Clear expired cache files
            </summary>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Data.WebDataCache">
            <summary>
            Can cache Uri data
            </summary>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetAsync(System.Uri,System.Boolean)">
            <summary>
            Stores webdata in cache based on uri as key
            Returns file
            </summary>
            <param name="uri"></param>
            <param name="forceGet"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetLocalUriAsync(System.Uri)">
            <summary>
            Stores webdata in cache based on uri as key
            Returns local uri
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.GetFolderAsync">
            <summary>
            Get the cache folder to read/write
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.SetAsync(System.Uri)">
            <summary>
            Insert given uri in cache. Data will be loaded from the web
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.Delete(System.Uri)">
            <summary>
            Delete from cache based on Uri (=key)
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Data.WebDataCache.ClearAll">
            <summary>
            Clear the complete webcache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Q42.WinRT.Extensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Similar in nature to Parallel.ForEach, with the primary difference being that Parallel.ForEach is a synchronous method and uses synchronous delegates.
            http://blogs.msdn.com/b/pfxteam/archive/2012/03/05/10278165.aspx
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dop"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Extensions.ToCacheKey(System.Uri)">
            <summary>
            Converts Uri to cache key extension method
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Extensions.ContainsFileAsync(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Extension method to check if file exist in folder
            </summary>
            <param name="folder"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Storage.IStorageHelper`1">
            <summary>
            StorageHelper interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Q42.WinRT.Storage.IStorageHelper`1.DeleteAsync(System.String)">
            <summary>
            Delete file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.IStorageHelper`1.SaveAsync(`0,System.String)">
            <summary>
            Save object from file
            </summary>
            <param name="Obj"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.IStorageHelper`1.LoadAsync(System.String)">
            <summary>
            Load object from file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.IStorageHelper`1.DeleteAllFiles">
            <summary>
            Deletes all files in current directory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Storage.SettingsHelper">
            <summary>
            Settings helper for compatibility between Windows Phone and Windows 8
            </summary>
        </member>
        <member name="M:Q42.WinRT.Storage.SettingsHelper.Set``1(System.String,``0)">
            <summary>
            Set setting value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.SettingsHelper.Contains(System.String)">
            <summary>
            Check if the key exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.SettingsHelper.Get``1(System.String)">
            <summary>
            Gets value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.SettingsHelper.Get``1(System.String,``0)">
            <summary>
            Gets value, returns default value if value does not exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.SettingsHelper.Remove(System.String)">
            <summary>
            Removes a value from the settings
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Q42.WinRT.Storage.StorageType">
            <summary>
            Possible storage locations
            </summary>
        </member>
        <member name="F:Q42.WinRT.Storage.StorageType.Local">
            <summary>Local</summary>
        </member>
        <member name="F:Q42.WinRT.Storage.StorageType.Temporary">
            <summary>Temporary</summary>
        </member>
        <member name="F:Q42.WinRT.Storage.StorageType.Roaming">
            <summary>Roaming</summary>
        </member>
        <member name="T:Q42.WinRT.Storage.StorageSerializer">
            <summary>
            Type of Serializer used
            </summary>
        </member>
        <member name="F:Q42.WinRT.Storage.StorageSerializer.JSON">
            <summary>JSON</summary>
        </member>
        <member name="F:Q42.WinRT.Storage.StorageSerializer.XML">
            <summary>XML</summary>
        </member>
        <member name="T:Q42.WinRT.Storage.StorageHelper`1">
            <summary>
            Save object to local storage, serializes as json and writes object to a file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.#ctor(Q42.WinRT.Storage.StorageType,System.String,Q42.WinRT.Storage.StorageSerializer)">
            <summary>
            Default constructor
            </summary>
            <param name="StorageType"></param>
            <param name="subFolder"></param>
            <param name="serializerType"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.GetFileExtension">
            <summary>
            Gets file extension based on serializer type
            Never deserialize with the wrong serializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.DeleteAsync(System.String)">
            <summary>
            Delete file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.SaveAsync(`0,System.String)">
            <summary>
            Save object from file
            </summary>
            <param name="obj"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.LoadAsync(System.String)">
            <summary>
            Load object from file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.GetFolderAsync">
            <summary>
            Get folder based on storagetype
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.DeleteAllFiles">
            <summary>
            Deletes all files in current folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Storage.StorageHelper`1.ClearLocalAll">
            <summary>
            Clear the complete cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Q42.WinRT.Util">
            <summary>
            Various Utils
            </summary>
        </member>
        <member name="M:Q42.WinRT.Util.GetAppVersion">
            <summary>
            Get application version as formatted string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetOsVersionAsync">
            <summary>
            Uses the WebView control to get the OS Version from the UserAgent string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetUserAgent">
            <summary>
            Uses WebView control to get the user agent string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.WinRT.Util.GetMachineName">
            <summary>
             Want to store the hostname to send for push notifications to make
             the management UI better. Take the substring up to the first period
             of the first DomainName entry.
             
             Thanks to Jeff Wilcox and Matthijs Hoekstra
            </summary>
        </member>
    </members>
</doc>
