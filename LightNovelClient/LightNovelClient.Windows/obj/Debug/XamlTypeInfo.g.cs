//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace LightNovel
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace LightNovel.LightNovelClient_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[56];
            _typeNameTable[0] = "LightNovel.Controls.BooleanToVisibilityConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Boolean";
            _typeNameTable[3] = "LightNovel.Common.BooleanNegationConverter";
            _typeNameTable[4] = "LightNovel.Controls.PlusConverter";
            _typeNameTable[5] = "LightNovel.Common.OrientationToVisibilityConverter";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[7] = "LightNovel.CollectionPage";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[10] = "LightNovel.Common.ObservableDictionary";
            _typeNameTable[11] = "String";
            _typeNameTable[12] = "LightNovel.Common.NavigationHelper";
            _typeNameTable[13] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[14] = "Windows.UI.Color";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "Byte";
            _typeNameTable[17] = "LightNovel.StringToSymbolConverter";
            _typeNameTable[18] = "LightNovel.Controls.SearchBox";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.SearchBox";
            _typeNameTable[20] = "WinRTXamlToolkit.Controls.WatermarkTextBox";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.TextBox";
            _typeNameTable[22] = "Windows.UI.Xaml.Style";
            _typeNameTable[23] = "LightNovel.HubPage";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.ScrollViewer";
            _typeNameTable[25] = "LightNovel.ViewModels.MainViewModel";
            _typeNameTable[26] = "LightNovel.BooleanToSymbolConverter";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[28] = "LightNovel.Controls.RichTextColumns";
            _typeNameTable[29] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[30] = "Windows.UI.Xaml.Controls.RichTextBlock";
            _typeNameTable[31] = "Double";
            _typeNameTable[32] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[33] = "Int32";
            _typeNameTable[34] = "WinRTXamlToolkit.Controls.Extensions.ListViewExtensions";
            _typeNameTable[35] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[36] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[37] = "WinRTXamlToolkit.Controls.Extensions.ListViewBindableSelectionHandler";
            _typeNameTable[38] = "LightNovel.ReadingPage";
            _typeNameTable[39] = "LightNovel.ViewModels.ReadingPageViewModel";
            _typeNameTable[40] = "System.Threading.Tasks.Task`1<LightNovel.Service.Chapter>";
            _typeNameTable[41] = "System.Threading.Tasks.Task";
            _typeNameTable[42] = "LightNovel.SearchResultsPage";
            _typeNameTable[43] = "System.Collections.Generic.List`1<LightNovel.Service.BookItem>";
            _typeNameTable[44] = "LightNovel.Service.BookItem";
            _typeNameTable[45] = "LightNovel.Service.BookItemType";
            _typeNameTable[46] = "System.Enum";
            _typeNameTable[47] = "System.Threading.Tasks.Task`1<System.Collections.Generic.List`1<LightNovel.Service.BookItem>>";
            _typeNameTable[48] = "LightNovel.Controls.RichTextView";
            _typeNameTable[49] = "LightNovel.ExtendedSplash";
            _typeNameTable[50] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[51] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[52] = "Windows.UI.Text.FontWeight";
            _typeNameTable[53] = "LightNovel.Controls.ExpanderView";
            _typeNameTable[54] = "WinRTXamlToolkit.Controls.HeaderedItemsControl";
            _typeNameTable[55] = "Windows.UI.Xaml.Controls.ItemsControl";

            _typeTable = new global::System.Type[56];
            _typeTable[0] = typeof(global::LightNovel.Controls.BooleanToVisibilityConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::System.Boolean);
            _typeTable[3] = typeof(global::LightNovel.Common.BooleanNegationConverter);
            _typeTable[4] = typeof(global::LightNovel.Controls.PlusConverter);
            _typeTable[5] = typeof(global::LightNovel.Common.OrientationToVisibilityConverter);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[7] = typeof(global::LightNovel.CollectionPage);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[10] = typeof(global::LightNovel.Common.ObservableDictionary);
            _typeTable[11] = typeof(global::System.String);
            _typeTable[12] = typeof(global::LightNovel.Common.NavigationHelper);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[14] = typeof(global::Windows.UI.Color);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::System.Byte);
            _typeTable[17] = typeof(global::LightNovel.StringToSymbolConverter);
            _typeTable[18] = typeof(global::LightNovel.Controls.SearchBox);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.SearchBox);
            _typeTable[20] = typeof(global::WinRTXamlToolkit.Controls.WatermarkTextBox);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.TextBox);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[23] = typeof(global::LightNovel.HubPage);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.ScrollViewer);
            _typeTable[25] = typeof(global::LightNovel.ViewModels.MainViewModel);
            _typeTable[26] = typeof(global::LightNovel.BooleanToSymbolConverter);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[28] = typeof(global::LightNovel.Controls.RichTextColumns);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Controls.RichTextBlock);
            _typeTable[31] = typeof(global::System.Double);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[33] = typeof(global::System.Int32);
            _typeTable[34] = typeof(global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions);
            _typeTable[35] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[36] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[37] = typeof(global::WinRTXamlToolkit.Controls.Extensions.ListViewBindableSelectionHandler);
            _typeTable[38] = typeof(global::LightNovel.ReadingPage);
            _typeTable[39] = typeof(global::LightNovel.ViewModels.ReadingPageViewModel);
            _typeTable[40] = typeof(global::System.Threading.Tasks.Task<global::LightNovel.Service.Chapter>);
            _typeTable[41] = typeof(global::System.Threading.Tasks.Task);
            _typeTable[42] = typeof(global::LightNovel.SearchResultsPage);
            _typeTable[43] = typeof(global::System.Collections.Generic.List<global::LightNovel.Service.BookItem>);
            _typeTable[44] = typeof(global::LightNovel.Service.BookItem);
            _typeTable[45] = typeof(global::LightNovel.Service.BookItemType);
            _typeTable[46] = typeof(global::System.Enum);
            _typeTable[47] = typeof(global::System.Threading.Tasks.Task<System.Collections.Generic.List<global::LightNovel.Service.BookItem>>);
            _typeTable[48] = typeof(global::LightNovel.Controls.RichTextView);
            _typeTable[49] = typeof(global::LightNovel.ExtendedSplash);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[52] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[53] = typeof(global::LightNovel.Controls.ExpanderView);
            _typeTable[54] = typeof(global::WinRTXamlToolkit.Controls.HeaderedItemsControl);
            _typeTable[55] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BooleanToVisibilityConverter() { return new global::LightNovel.Controls.BooleanToVisibilityConverter(); }
        private object Activate_3_BooleanNegationConverter() { return new global::LightNovel.Common.BooleanNegationConverter(); }
        private object Activate_4_PlusConverter() { return new global::LightNovel.Controls.PlusConverter(); }
        private object Activate_5_OrientationToVisibilityConverter() { return new global::LightNovel.Common.OrientationToVisibilityConverter(); }
        private object Activate_7_CollectionPage() { return new global::LightNovel.CollectionPage(); }
        private object Activate_10_ObservableDictionary() { return new global::LightNovel.Common.ObservableDictionary(); }
        private object Activate_17_StringToSymbolConverter() { return new global::LightNovel.StringToSymbolConverter(); }
        private object Activate_18_SearchBox() { return new global::LightNovel.Controls.SearchBox(); }
        private object Activate_20_WatermarkTextBox() { return new global::WinRTXamlToolkit.Controls.WatermarkTextBox(); }
        private object Activate_23_HubPage() { return new global::LightNovel.HubPage(); }
        private object Activate_25_MainViewModel() { return new global::LightNovel.ViewModels.MainViewModel(); }
        private object Activate_26_BooleanToSymbolConverter() { return new global::LightNovel.BooleanToSymbolConverter(); }
        private object Activate_28_RichTextColumns() { return new global::LightNovel.Controls.RichTextColumns(); }
        private object Activate_35_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_36_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_38_ReadingPage() { return new global::LightNovel.ReadingPage(); }
        private object Activate_39_ReadingPageViewModel() { return new global::LightNovel.ViewModels.ReadingPageViewModel(); }
        private object Activate_42_SearchResultsPage() { return new global::LightNovel.SearchResultsPage(); }
        private object Activate_43_List() { return new global::System.Collections.Generic.List<global::LightNovel.Service.BookItem>(); }
        private object Activate_44_BookItem() { return new global::LightNovel.Service.BookItem(); }
        private object Activate_48_RichTextView() { return new global::LightNovel.Controls.RichTextView(); }
        private object Activate_53_ExpanderView() { return new global::LightNovel.Controls.ExpanderView(); }
        private object Activate_54_HeaderedItemsControl() { return new global::WinRTXamlToolkit.Controls.HeaderedItemsControl(); }
        private void MapAdd_10_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_35_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LightNovel.Service.BookItem>)instance;
            var newItem = (global::LightNovel.Service.BookItem)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  LightNovel.Controls.BooleanToVisibilityConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_BooleanToVisibilityConverter;
                userType.AddMemberName("VisiableValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Boolean
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  LightNovel.Common.BooleanNegationConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_BooleanNegationConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  LightNovel.Controls.PlusConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_PlusConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  LightNovel.Common.OrientationToVisibilityConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_OrientationToVisibilityConverter;
                userType.AddMemberName("VisibleOrientation");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  LightNovel.CollectionPage
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_CollectionPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  LightNovel.Common.ObservableDictionary
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_10_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  String
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  LightNovel.Common.NavigationHelper
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Color
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  Byte
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  LightNovel.StringToSymbolConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_StringToSymbolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  LightNovel.Controls.SearchBox
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SearchBox"));
                userType.Activator = Activate_18_SearchBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Xaml.Controls.SearchBox
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  WinRTXamlToolkit.Controls.WatermarkTextBox
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_20_WatermarkTextBox;
                userType.AddMemberName("Watermark");
                userType.AddMemberName("WatermarkText");
                userType.AddMemberName("WatermarkTextStyle");
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.TextBox
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.Style
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  LightNovel.HubPage
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_HubPage;
                userType.AddMemberName("HubScrollViewer");
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.ScrollViewer
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  LightNovel.ViewModels.MainViewModel
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  LightNovel.BooleanToSymbolConverter
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_BooleanToSymbolConverter;
                userType.AddMemberName("FalseSymbol");
                userType.AddMemberName("TrueSymbol");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  LightNovel.Controls.RichTextColumns
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_28_RichTextColumns;
                userType.SetContentPropertyName("LightNovel.Controls.RichTextColumns.RichTextContent");
                userType.AddMemberName("RichTextContent");
                userType.AddMemberName("ColumnHeight");
                userType.AddMemberName("ColumnWidth");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ColumnTemplate");
                userType.AddMemberName("IsLayoutValiad");
                userType.AddMemberName("ColumnsPerPage");
                userType.AddMemberName("AreHorizontalSnapPointsRegular");
                userType.AddMemberName("AreVerticalSnapPointsRegular");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Xaml.Controls.RichTextBlock
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Double
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Int32
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  WinRTXamlToolkit.Controls.Extensions.ListViewExtensions
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("ItemToBringIntoView");
                userType.AddMemberName("BindableSelection");
                userType.AddMemberName("BindableSelectionHandler");
                xamlType = userType;
                break;

            case 35:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.CollectionAdd = VectorAdd_35_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_Collection;
                userType.CollectionAdd = VectorAdd_36_Collection;
                xamlType = userType;
                break;

            case 37:   //  WinRTXamlToolkit.Controls.Extensions.ListViewBindableSelectionHandler
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  LightNovel.ReadingPage
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_ReadingPage;
                userType.AddMemberName("UsingLogicalIndexPage");
                userType.AddMemberName("ScrollSwitch");
                userType.AddMemberName("UseTargetLine");
                userType.AddMemberName("TargetLineNo");
                userType.AddMemberName("TargetPageNo");
                userType.AddMemberName("TotalPage");
                userType.AddMemberName("DisableAnimationScrollingFlag");
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("IsIndexPanelOpen");
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("LoadingAheadTask");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  LightNovel.ViewModels.ReadingPageViewModel
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  System.Threading.Tasks.Task`1<LightNovel.Service.Chapter>
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Threading.Tasks.Task"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  System.Threading.Tasks.Task
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 42:   //  LightNovel.SearchResultsPage
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_SearchResultsPage;
                userType.AddMemberName("QueryText");
                userType.AddMemberName("Results");
                userType.AddMemberName("QueryTask");
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  System.Collections.Generic.List`1<LightNovel.Service.BookItem>
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_43_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  LightNovel.Service.BookItem
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_BookItem;
                userType.AddMemberName("Id");
                userType.AddMemberName("Title");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("VolumeNo");
                userType.AddMemberName("SeriesId");
                userType.AddMemberName("VolumeId");
                userType.AddMemberName("HyperLinkUri");
                userType.AddMemberName("CoverImageUri");
                userType.AddMemberName("ItemType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  LightNovel.Service.BookItemType
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Series", global::LightNovel.Service.BookItemType.Series);
                userType.AddEnumValue("Volume", global::LightNovel.Service.BookItemType.Volume);
                userType.AddEnumValue("Chapter", global::LightNovel.Service.BookItemType.Chapter);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  System.Enum
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 47:   //  System.Threading.Tasks.Task`1<System.Collections.Generic.List`1<LightNovel.Service.BookItem>>
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Threading.Tasks.Task"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  LightNovel.Controls.RichTextView
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_48_RichTextView;
                userType.AddMemberName("PageWidth");
                userType.AddMemberName("PageHeight");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  LightNovel.ExtendedSplash
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.AddMemberName("RootFrame");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Windows.UI.Text.FontWeight
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 53:   //  LightNovel.Controls.ExpanderView
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl"));
                userType.Activator = Activate_53_ExpanderView;
                userType.AddMemberName("Expander");
                userType.AddMemberName("ExpanderTemplate");
                userType.AddMemberName("NonExpandableHeader");
                userType.AddMemberName("NonExpandableHeaderTemplate");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("HasItems");
                userType.AddMemberName("IsNonExpandable");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  WinRTXamlToolkit.Controls.HeaderedItemsControl
                userType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_54_HeaderedItemsControl;
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemContainerStyle");
                xamlType = userType;
                break;

            case 55:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BooleanToVisibilityConverter_VisiableValue(object instance)
        {
            var that = (global::LightNovel.Controls.BooleanToVisibilityConverter)instance;
            return that.VisiableValue;
        }
        private void set_0_BooleanToVisibilityConverter_VisiableValue(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.BooleanToVisibilityConverter)instance;
            that.VisiableValue = (global::System.Boolean)Value;
        }
        private object get_1_OrientationToVisibilityConverter_VisibleOrientation(object instance)
        {
            var that = (global::LightNovel.Common.OrientationToVisibilityConverter)instance;
            return that.VisibleOrientation;
        }
        private void set_1_OrientationToVisibilityConverter_VisibleOrientation(object instance, object Value)
        {
            var that = (global::LightNovel.Common.OrientationToVisibilityConverter)instance;
            that.VisibleOrientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_2_CollectionPage_DefaultViewModel(object instance)
        {
            var that = (global::LightNovel.CollectionPage)instance;
            return that.DefaultViewModel;
        }
        private object get_3_CollectionPage_NavigationHelper(object instance)
        {
            var that = (global::LightNovel.CollectionPage)instance;
            return that.NavigationHelper;
        }
        private object get_4_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_4_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_5_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_5_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_6_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_6_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_7_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_7_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_8_WatermarkTextBox_Watermark(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.Watermark;
        }
        private void set_8_WatermarkTextBox_Watermark(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.Watermark = (global::System.Object)Value;
        }
        private object get_9_WatermarkTextBox_WatermarkText(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkText;
        }
        private void set_9_WatermarkTextBox_WatermarkText(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkText = (global::System.String)Value;
        }
        private object get_10_WatermarkTextBox_WatermarkTextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkTextStyle;
        }
        private void set_10_WatermarkTextBox_WatermarkTextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_11_HubPage_HubScrollViewer(object instance)
        {
            var that = (global::LightNovel.HubPage)instance;
            return that.HubScrollViewer;
        }
        private object get_12_HubPage_NavigationHelper(object instance)
        {
            var that = (global::LightNovel.HubPage)instance;
            return that.NavigationHelper;
        }
        private object get_13_HubPage_ViewModel(object instance)
        {
            var that = (global::LightNovel.HubPage)instance;
            return that.ViewModel;
        }
        private object get_14_BooleanToSymbolConverter_FalseSymbol(object instance)
        {
            var that = (global::LightNovel.BooleanToSymbolConverter)instance;
            return that.FalseSymbol;
        }
        private void set_14_BooleanToSymbolConverter_FalseSymbol(object instance, object Value)
        {
            var that = (global::LightNovel.BooleanToSymbolConverter)instance;
            that.FalseSymbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_15_BooleanToSymbolConverter_TrueSymbol(object instance)
        {
            var that = (global::LightNovel.BooleanToSymbolConverter)instance;
            return that.TrueSymbol;
        }
        private void set_15_BooleanToSymbolConverter_TrueSymbol(object instance, object Value)
        {
            var that = (global::LightNovel.BooleanToSymbolConverter)instance;
            that.TrueSymbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_16_RichTextColumns_RichTextContent(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.RichTextContent;
        }
        private void set_16_RichTextColumns_RichTextContent(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.RichTextContent = (global::Windows.UI.Xaml.Controls.RichTextBlock)Value;
        }
        private object get_17_RichTextColumns_ColumnHeight(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.ColumnHeight;
        }
        private void set_17_RichTextColumns_ColumnHeight(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.ColumnHeight = (global::System.Double)Value;
        }
        private object get_18_RichTextColumns_ColumnWidth(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.ColumnWidth;
        }
        private void set_18_RichTextColumns_ColumnWidth(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.ColumnWidth = (global::System.Double)Value;
        }
        private object get_19_RichTextColumns_Orientation(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.Orientation;
        }
        private void set_19_RichTextColumns_Orientation(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_20_RichTextColumns_ColumnTemplate(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.ColumnTemplate;
        }
        private void set_20_RichTextColumns_ColumnTemplate(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.ColumnTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_21_RichTextColumns_IsLayoutValiad(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.IsLayoutValiad;
        }
        private object get_22_RichTextColumns_ColumnsPerPage(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.ColumnsPerPage;
        }
        private void set_22_RichTextColumns_ColumnsPerPage(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            that.ColumnsPerPage = (global::System.Int32)Value;
        }
        private object get_23_RichTextColumns_AreHorizontalSnapPointsRegular(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.AreHorizontalSnapPointsRegular;
        }
        private object get_24_RichTextColumns_AreVerticalSnapPointsRegular(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextColumns)instance;
            return that.AreVerticalSnapPointsRegular;
        }
        private object get_25_ListViewExtensions_ItemToBringIntoView(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.GetItemToBringIntoView((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_25_ListViewExtensions_ItemToBringIntoView(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.SetItemToBringIntoView((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Object)Value);
        }
        private object get_26_ListViewExtensions_BindableSelection(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.GetBindableSelection((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_26_ListViewExtensions_BindableSelection(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.SetBindableSelection((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>)Value);
        }
        private object get_27_ListViewExtensions_BindableSelectionHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.GetBindableSelectionHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_27_ListViewExtensions_BindableSelectionHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.SetBindableSelectionHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::WinRTXamlToolkit.Controls.Extensions.ListViewBindableSelectionHandler)Value);
        }
        private object get_28_ReadingPage_UsingLogicalIndexPage(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.UsingLogicalIndexPage;
        }
        private object get_29_ReadingPage_ScrollSwitch(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.ScrollSwitch;
        }
        private void set_29_ReadingPage_ScrollSwitch(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.ScrollSwitch = (global::System.Boolean)Value;
        }
        private object get_30_ReadingPage_UseTargetLine(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.UseTargetLine;
        }
        private void set_30_ReadingPage_UseTargetLine(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.UseTargetLine = (global::System.Boolean)Value;
        }
        private object get_31_ReadingPage_TargetLineNo(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.TargetLineNo;
        }
        private void set_31_ReadingPage_TargetLineNo(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.TargetLineNo = (global::System.Int32)Value;
        }
        private object get_32_ReadingPage_TargetPageNo(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.TargetPageNo;
        }
        private void set_32_ReadingPage_TargetPageNo(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.TargetPageNo = (global::System.Int32)Value;
        }
        private object get_33_ReadingPage_TotalPage(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.TotalPage;
        }
        private object get_34_ReadingPage_DisableAnimationScrollingFlag(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.DisableAnimationScrollingFlag;
        }
        private void set_34_ReadingPage_DisableAnimationScrollingFlag(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.DisableAnimationScrollingFlag = (global::System.Boolean)Value;
        }
        private object get_35_ReadingPage_ViewModel(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.ViewModel;
        }
        private object get_36_ReadingPage_IsIndexPanelOpen(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.IsIndexPanelOpen;
        }
        private void set_36_ReadingPage_IsIndexPanelOpen(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.IsIndexPanelOpen = (global::System.Boolean)Value;
        }
        private object get_37_ReadingPage_NavigationHelper(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.NavigationHelper;
        }
        private object get_38_ReadingPage_LoadingAheadTask(object instance)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            return that.LoadingAheadTask;
        }
        private void set_38_ReadingPage_LoadingAheadTask(object instance, object Value)
        {
            var that = (global::LightNovel.ReadingPage)instance;
            that.LoadingAheadTask = (global::System.Threading.Tasks.Task<global::LightNovel.Service.Chapter>)Value;
        }
        private object get_39_SearchResultsPage_QueryText(object instance)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            return that.QueryText;
        }
        private void set_39_SearchResultsPage_QueryText(object instance, object Value)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            that.QueryText = (global::System.String)Value;
        }
        private object get_40_SearchResultsPage_Results(object instance)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            return that.Results;
        }
        private void set_40_SearchResultsPage_Results(object instance, object Value)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            that.Results = (global::System.Collections.Generic.List<global::LightNovel.Service.BookItem>)Value;
        }
        private object get_41_BookItem_Id(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.Id;
        }
        private void set_41_BookItem_Id(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_42_BookItem_Title(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.Title;
        }
        private void set_42_BookItem_Title(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_43_BookItem_Subtitle(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.Subtitle;
        }
        private void set_43_BookItem_Subtitle(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_44_BookItem_VolumeNo(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.VolumeNo;
        }
        private void set_44_BookItem_VolumeNo(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.VolumeNo = (global::System.String)Value;
        }
        private object get_45_BookItem_SeriesId(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.SeriesId;
        }
        private void set_45_BookItem_SeriesId(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.SeriesId = (global::System.String)Value;
        }
        private object get_46_BookItem_VolumeId(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.VolumeId;
        }
        private void set_46_BookItem_VolumeId(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.VolumeId = (global::System.String)Value;
        }
        private object get_47_BookItem_HyperLinkUri(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.HyperLinkUri;
        }
        private void set_47_BookItem_HyperLinkUri(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.HyperLinkUri = (global::System.String)Value;
        }
        private object get_48_BookItem_CoverImageUri(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.CoverImageUri;
        }
        private void set_48_BookItem_CoverImageUri(object instance, object Value)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            that.CoverImageUri = (global::System.String)Value;
        }
        private object get_49_BookItem_ItemType(object instance)
        {
            var that = (global::LightNovel.Service.BookItem)instance;
            return that.ItemType;
        }
        private object get_50_SearchResultsPage_QueryTask(object instance)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            return that.QueryTask;
        }
        private void set_50_SearchResultsPage_QueryTask(object instance, object Value)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            that.QueryTask = (global::System.Threading.Tasks.Task<System.Collections.Generic.List<global::LightNovel.Service.BookItem>>)Value;
        }
        private object get_51_SearchResultsPage_DefaultViewModel(object instance)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            return that.DefaultViewModel;
        }
        private object get_52_SearchResultsPage_NavigationHelper(object instance)
        {
            var that = (global::LightNovel.SearchResultsPage)instance;
            return that.NavigationHelper;
        }
        private object get_53_RichTextView_PageWidth(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextView)instance;
            return that.PageWidth;
        }
        private void set_53_RichTextView_PageWidth(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextView)instance;
            that.PageWidth = (global::System.Double)Value;
        }
        private object get_54_RichTextView_PageHeight(object instance)
        {
            var that = (global::LightNovel.Controls.RichTextView)instance;
            return that.PageHeight;
        }
        private void set_54_RichTextView_PageHeight(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.RichTextView)instance;
            that.PageHeight = (global::System.Double)Value;
        }
        private object get_55_ExtendedSplash_RootFrame(object instance)
        {
            var that = (global::LightNovel.ExtendedSplash)instance;
            return that.RootFrame;
        }
        private object get_56_ExpanderView_Expander(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.Expander;
        }
        private void set_56_ExpanderView_Expander(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.Expander = (global::System.Object)Value;
        }
        private object get_57_ExpanderView_ExpanderTemplate(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.ExpanderTemplate;
        }
        private void set_57_ExpanderView_ExpanderTemplate(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.ExpanderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_58_ExpanderView_NonExpandableHeader(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.NonExpandableHeader;
        }
        private void set_58_ExpanderView_NonExpandableHeader(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.NonExpandableHeader = (global::System.Object)Value;
        }
        private object get_59_ExpanderView_NonExpandableHeaderTemplate(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.NonExpandableHeaderTemplate;
        }
        private void set_59_ExpanderView_NonExpandableHeaderTemplate(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.NonExpandableHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_60_ExpanderView_IsExpanded(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.IsExpanded;
        }
        private void set_60_ExpanderView_IsExpanded(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_61_ExpanderView_HasItems(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.HasItems;
        }
        private void set_61_ExpanderView_HasItems(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.HasItems = (global::System.Boolean)Value;
        }
        private object get_62_ExpanderView_IsNonExpandable(object instance)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            return that.IsNonExpandable;
        }
        private void set_62_ExpanderView_IsNonExpandable(object instance, object Value)
        {
            var that = (global::LightNovel.Controls.ExpanderView)instance;
            that.IsNonExpandable = (global::System.Boolean)Value;
        }
        private object get_63_HeaderedItemsControl_Header(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.Header;
        }
        private void set_63_HeaderedItemsControl_Header(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_64_HeaderedItemsControl_HeaderTemplate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.HeaderTemplate;
        }
        private void set_64_HeaderedItemsControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_65_HeaderedItemsControl_ItemContainerStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.ItemContainerStyle;
        }
        private void set_65_HeaderedItemsControl_ItemContainerStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.ItemContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "LightNovel.Controls.BooleanToVisibilityConverter.VisiableValue":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.BooleanToVisibilityConverter");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "VisiableValue", "Boolean");
                xamlMember.Getter = get_0_BooleanToVisibilityConverter_VisiableValue;
                xamlMember.Setter = set_0_BooleanToVisibilityConverter_VisiableValue;
                break;
            case "LightNovel.Common.OrientationToVisibilityConverter.VisibleOrientation":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Common.OrientationToVisibilityConverter");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "VisibleOrientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.Getter = get_1_OrientationToVisibilityConverter_VisibleOrientation;
                xamlMember.Setter = set_1_OrientationToVisibilityConverter_VisibleOrientation;
                break;
            case "LightNovel.CollectionPage.DefaultViewModel":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.CollectionPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "LightNovel.Common.ObservableDictionary");
                xamlMember.Getter = get_2_CollectionPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.CollectionPage.NavigationHelper":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.CollectionPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "LightNovel.Common.NavigationHelper");
                xamlMember.Getter = get_3_CollectionPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_4_Color_A;
                xamlMember.Setter = set_4_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_5_Color_B;
                xamlMember.Setter = set_5_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_6_Color_G;
                xamlMember.Setter = set_6_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_7_Color_R;
                xamlMember.Setter = set_7_Color_R;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.Watermark":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Watermark", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_WatermarkTextBox_Watermark;
                xamlMember.Setter = set_8_WatermarkTextBox_Watermark;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkText":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "WatermarkText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_WatermarkTextBox_WatermarkText;
                xamlMember.Setter = set_9_WatermarkTextBox_WatermarkText;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkTextStyle":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "WatermarkTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_WatermarkTextBox_WatermarkTextStyle;
                xamlMember.Setter = set_10_WatermarkTextBox_WatermarkTextStyle;
                break;
            case "LightNovel.HubPage.HubScrollViewer":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.HubPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "HubScrollViewer", "Windows.UI.Xaml.Controls.ScrollViewer");
                xamlMember.Getter = get_11_HubPage_HubScrollViewer;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.HubPage.NavigationHelper":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.HubPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "LightNovel.Common.NavigationHelper");
                xamlMember.Getter = get_12_HubPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.HubPage.ViewModel":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.HubPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ViewModel", "LightNovel.ViewModels.MainViewModel");
                xamlMember.Getter = get_13_HubPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.BooleanToSymbolConverter.FalseSymbol":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.BooleanToSymbolConverter");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "FalseSymbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_14_BooleanToSymbolConverter_FalseSymbol;
                xamlMember.Setter = set_14_BooleanToSymbolConverter_FalseSymbol;
                break;
            case "LightNovel.BooleanToSymbolConverter.TrueSymbol":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.BooleanToSymbolConverter");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "TrueSymbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_15_BooleanToSymbolConverter_TrueSymbol;
                xamlMember.Setter = set_15_BooleanToSymbolConverter_TrueSymbol;
                break;
            case "LightNovel.Controls.RichTextColumns.RichTextContent":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "RichTextContent", "Windows.UI.Xaml.Controls.RichTextBlock");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_RichTextColumns_RichTextContent;
                xamlMember.Setter = set_16_RichTextColumns_RichTextContent;
                break;
            case "LightNovel.Controls.RichTextColumns.ColumnHeight":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ColumnHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_RichTextColumns_ColumnHeight;
                xamlMember.Setter = set_17_RichTextColumns_ColumnHeight;
                break;
            case "LightNovel.Controls.RichTextColumns.ColumnWidth":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ColumnWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_RichTextColumns_ColumnWidth;
                xamlMember.Setter = set_18_RichTextColumns_ColumnWidth;
                break;
            case "LightNovel.Controls.RichTextColumns.Orientation":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_RichTextColumns_Orientation;
                xamlMember.Setter = set_19_RichTextColumns_Orientation;
                break;
            case "LightNovel.Controls.RichTextColumns.ColumnTemplate":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ColumnTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RichTextColumns_ColumnTemplate;
                xamlMember.Setter = set_20_RichTextColumns_ColumnTemplate;
                break;
            case "LightNovel.Controls.RichTextColumns.IsLayoutValiad":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "IsLayoutValiad", "Boolean");
                xamlMember.Getter = get_21_RichTextColumns_IsLayoutValiad;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.Controls.RichTextColumns.ColumnsPerPage":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ColumnsPerPage", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_RichTextColumns_ColumnsPerPage;
                xamlMember.Setter = set_22_RichTextColumns_ColumnsPerPage;
                break;
            case "LightNovel.Controls.RichTextColumns.AreHorizontalSnapPointsRegular":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "AreHorizontalSnapPointsRegular", "Boolean");
                xamlMember.Getter = get_23_RichTextColumns_AreHorizontalSnapPointsRegular;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.Controls.RichTextColumns.AreVerticalSnapPointsRegular":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextColumns");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "AreVerticalSnapPointsRegular", "Boolean");
                xamlMember.Getter = get_24_RichTextColumns_AreVerticalSnapPointsRegular;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.ItemToBringIntoView":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ListViewExtensions");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ItemToBringIntoView", "Object");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_25_ListViewExtensions_ItemToBringIntoView;
                xamlMember.Setter = set_25_ListViewExtensions_ItemToBringIntoView;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.BindableSelection":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ListViewExtensions");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "BindableSelection", "System.Collections.ObjectModel.ObservableCollection`1<Object>");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_26_ListViewExtensions_BindableSelection;
                xamlMember.Setter = set_26_ListViewExtensions_BindableSelection;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.ListViewExtensions.BindableSelectionHandler":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.ListViewExtensions");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "BindableSelectionHandler", "WinRTXamlToolkit.Controls.Extensions.ListViewBindableSelectionHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_27_ListViewExtensions_BindableSelectionHandler;
                xamlMember.Setter = set_27_ListViewExtensions_BindableSelectionHandler;
                break;
            case "LightNovel.ReadingPage.UsingLogicalIndexPage":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "UsingLogicalIndexPage", "Boolean");
                xamlMember.Getter = get_28_ReadingPage_UsingLogicalIndexPage;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.ReadingPage.ScrollSwitch":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ScrollSwitch", "Boolean");
                xamlMember.Getter = get_29_ReadingPage_ScrollSwitch;
                xamlMember.Setter = set_29_ReadingPage_ScrollSwitch;
                break;
            case "LightNovel.ReadingPage.UseTargetLine":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "UseTargetLine", "Boolean");
                xamlMember.Getter = get_30_ReadingPage_UseTargetLine;
                xamlMember.Setter = set_30_ReadingPage_UseTargetLine;
                break;
            case "LightNovel.ReadingPage.TargetLineNo":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "TargetLineNo", "Int32");
                xamlMember.Getter = get_31_ReadingPage_TargetLineNo;
                xamlMember.Setter = set_31_ReadingPage_TargetLineNo;
                break;
            case "LightNovel.ReadingPage.TargetPageNo":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "TargetPageNo", "Int32");
                xamlMember.Getter = get_32_ReadingPage_TargetPageNo;
                xamlMember.Setter = set_32_ReadingPage_TargetPageNo;
                break;
            case "LightNovel.ReadingPage.TotalPage":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "TotalPage", "Int32");
                xamlMember.Getter = get_33_ReadingPage_TotalPage;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.ReadingPage.DisableAnimationScrollingFlag":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "DisableAnimationScrollingFlag", "Boolean");
                xamlMember.Getter = get_34_ReadingPage_DisableAnimationScrollingFlag;
                xamlMember.Setter = set_34_ReadingPage_DisableAnimationScrollingFlag;
                break;
            case "LightNovel.ReadingPage.ViewModel":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ViewModel", "LightNovel.ViewModels.ReadingPageViewModel");
                xamlMember.Getter = get_35_ReadingPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.ReadingPage.IsIndexPanelOpen":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "IsIndexPanelOpen", "Boolean");
                xamlMember.Getter = get_36_ReadingPage_IsIndexPanelOpen;
                xamlMember.Setter = set_36_ReadingPage_IsIndexPanelOpen;
                break;
            case "LightNovel.ReadingPage.NavigationHelper":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "LightNovel.Common.NavigationHelper");
                xamlMember.Getter = get_37_ReadingPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.ReadingPage.LoadingAheadTask":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ReadingPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "LoadingAheadTask", "System.Threading.Tasks.Task`1<LightNovel.Service.Chapter>");
                xamlMember.Getter = get_38_ReadingPage_LoadingAheadTask;
                xamlMember.Setter = set_38_ReadingPage_LoadingAheadTask;
                break;
            case "LightNovel.SearchResultsPage.QueryText":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.SearchResultsPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "QueryText", "String");
                xamlMember.Getter = get_39_SearchResultsPage_QueryText;
                xamlMember.Setter = set_39_SearchResultsPage_QueryText;
                break;
            case "LightNovel.SearchResultsPage.Results":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.SearchResultsPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Results", "System.Collections.Generic.List`1<LightNovel.Service.BookItem>");
                xamlMember.Getter = get_40_SearchResultsPage_Results;
                xamlMember.Setter = set_40_SearchResultsPage_Results;
                break;
            case "LightNovel.Service.BookItem.Id":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_41_BookItem_Id;
                xamlMember.Setter = set_41_BookItem_Id;
                break;
            case "LightNovel.Service.BookItem.Title":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_42_BookItem_Title;
                xamlMember.Setter = set_42_BookItem_Title;
                break;
            case "LightNovel.Service.BookItem.Subtitle":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.Getter = get_43_BookItem_Subtitle;
                xamlMember.Setter = set_43_BookItem_Subtitle;
                break;
            case "LightNovel.Service.BookItem.VolumeNo":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "VolumeNo", "String");
                xamlMember.Getter = get_44_BookItem_VolumeNo;
                xamlMember.Setter = set_44_BookItem_VolumeNo;
                break;
            case "LightNovel.Service.BookItem.SeriesId":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "SeriesId", "String");
                xamlMember.Getter = get_45_BookItem_SeriesId;
                xamlMember.Setter = set_45_BookItem_SeriesId;
                break;
            case "LightNovel.Service.BookItem.VolumeId":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "VolumeId", "String");
                xamlMember.Getter = get_46_BookItem_VolumeId;
                xamlMember.Setter = set_46_BookItem_VolumeId;
                break;
            case "LightNovel.Service.BookItem.HyperLinkUri":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "HyperLinkUri", "String");
                xamlMember.Getter = get_47_BookItem_HyperLinkUri;
                xamlMember.Setter = set_47_BookItem_HyperLinkUri;
                break;
            case "LightNovel.Service.BookItem.CoverImageUri":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "CoverImageUri", "String");
                xamlMember.Getter = get_48_BookItem_CoverImageUri;
                xamlMember.Setter = set_48_BookItem_CoverImageUri;
                break;
            case "LightNovel.Service.BookItem.ItemType":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Service.BookItem");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ItemType", "LightNovel.Service.BookItemType");
                xamlMember.Getter = get_49_BookItem_ItemType;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.SearchResultsPage.QueryTask":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.SearchResultsPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "QueryTask", "System.Threading.Tasks.Task`1<System.Collections.Generic.List`1<LightNovel.Service.BookItem>>");
                xamlMember.Getter = get_50_SearchResultsPage_QueryTask;
                xamlMember.Setter = set_50_SearchResultsPage_QueryTask;
                break;
            case "LightNovel.SearchResultsPage.DefaultViewModel":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.SearchResultsPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "LightNovel.Common.ObservableDictionary");
                xamlMember.Getter = get_51_SearchResultsPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.SearchResultsPage.NavigationHelper":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.SearchResultsPage");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "LightNovel.Common.NavigationHelper");
                xamlMember.Getter = get_52_SearchResultsPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.Controls.RichTextView.PageWidth":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "PageWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_RichTextView_PageWidth;
                xamlMember.Setter = set_53_RichTextView_PageWidth;
                break;
            case "LightNovel.Controls.RichTextView.PageHeight":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.RichTextView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "PageHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RichTextView_PageHeight;
                xamlMember.Setter = set_54_RichTextView_PageHeight;
                break;
            case "LightNovel.ExtendedSplash.RootFrame":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.ExtendedSplash");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "RootFrame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.Getter = get_55_ExtendedSplash_RootFrame;
                xamlMember.SetIsReadOnly();
                break;
            case "LightNovel.Controls.ExpanderView.Expander":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Expander", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ExpanderView_Expander;
                xamlMember.Setter = set_56_ExpanderView_Expander;
                break;
            case "LightNovel.Controls.ExpanderView.ExpanderTemplate":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ExpanderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_ExpanderView_ExpanderTemplate;
                xamlMember.Setter = set_57_ExpanderView_ExpanderTemplate;
                break;
            case "LightNovel.Controls.ExpanderView.NonExpandableHeader":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NonExpandableHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ExpanderView_NonExpandableHeader;
                xamlMember.Setter = set_58_ExpanderView_NonExpandableHeader;
                break;
            case "LightNovel.Controls.ExpanderView.NonExpandableHeaderTemplate":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "NonExpandableHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_ExpanderView_NonExpandableHeaderTemplate;
                xamlMember.Setter = set_59_ExpanderView_NonExpandableHeaderTemplate;
                break;
            case "LightNovel.Controls.ExpanderView.IsExpanded":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_ExpanderView_IsExpanded;
                xamlMember.Setter = set_60_ExpanderView_IsExpanded;
                break;
            case "LightNovel.Controls.ExpanderView.HasItems":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "HasItems", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_ExpanderView_HasItems;
                xamlMember.Setter = set_61_ExpanderView_HasItems;
                break;
            case "LightNovel.Controls.ExpanderView.IsNonExpandable":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightNovel.Controls.ExpanderView");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "IsNonExpandable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_ExpanderView_IsNonExpandable;
                xamlMember.Setter = set_62_ExpanderView_IsNonExpandable;
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.Header":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_HeaderedItemsControl_Header;
                xamlMember.Setter = set_63_HeaderedItemsControl_Header;
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.HeaderTemplate":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_HeaderedItemsControl_HeaderTemplate;
                xamlMember.Setter = set_64_HeaderedItemsControl_HeaderTemplate;
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.ItemContainerStyle":
                userType = (global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlMember(this, "ItemContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_HeaderedItemsControl_ItemContainerStyle;
                xamlMember.Setter = set_65_HeaderedItemsControl_ItemContainerStyle;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::LightNovel.LightNovelClient_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


